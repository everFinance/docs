"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[6558],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return t?a.createElement(f,s(s({ref:n},d),{},{components:t})):a.createElement(f,s({ref:n},d))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4455:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:3},s="Transaction",o={unversionedId:"guide/dive/transaction",id:"guide/dive/transaction",title:"Transaction",description:"Content Summary",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/guide/dive/transaction.md",sourceDirName:"guide/dive",slug:"/guide/dive/transaction",permalink:"/en/docs/guide/dive/transaction",draft:!1,editUrl:"https://github.com/everFinance/docs/edit/master/i18n/en/docusaurus-plugin-content-docs/current/guide/dive/transaction.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"guide",previous:{title:"Account Model",permalink:"/en/docs/guide/dive/account-model"},next:{title:"Deposit",permalink:"/en/docs/guide/dive/deposit"}},l={},c=[{value:"Content Summary",id:"content-summary",level:2},{value:"Schema",id:"schema",level:2},{value:"Example of an ethereum account",id:"example-of-an-ethereum-account",level:3},{value:"Example of an arweave account",id:"example-of-an-arweave-account",level:3},{value:"Example of a smart account",id:"example-of-a-smart-account",level:3},{value:"messageData",id:"messagedata",level:2},{value:"Generation rules",id:"generation-rules",level:3},{value:"Example of an ethereum account",id:"example-of-an-ethereum-account-1",level:3},{value:"Example of an arweave account",id:"example-of-an-arweave-account-1",level:3},{value:"Example of a smart account",id:"example-of-a-smart-account-1",level:3},{value:"everHash",id:"everhash",level:2},{value:"Generation rules",id:"generation-rules-1",level:3},{value:"signature",id:"signature",level:2},{value:"Ethereum Account Model",id:"ethereum-account-model",level:3},{value:"Generate signature with everPay Tx via ethers.js",id:"generate-signature-with-everpay-tx-via-ethersjs",level:4},{value:"Arweave Account Model",id:"arweave-account-model",level:3},{value:"Generate signature with everPay Tx via arweave.js",id:"generate-signature-with-everpay-tx-via-arweavejs",level:4},{value:"Smart Account Model",id:"smart-account-model",level:3},{value:"Signature Checksum",id:"signature-checksum",level:2},{value:"Ethereum Account Model",id:"ethereum-account-model-1",level:3},{value:"Arweave Account Model",id:"arweave-account-model-1",level:3},{value:"Smart Account Model",id:"smart-account-model-1",level:3},{value:"Submit a transaction",id:"submit-a-transaction",level:2},{value:"Field Descriptions",id:"field-descriptions",level:3},{value:"Example",id:"example",level:3},{value:"nonce",id:"nonce",level:3},{value:"Transaction Record",id:"transaction-record",level:2},{value:"Field Descriptions",id:"field-descriptions-1",level:3},{value:"Query Interface",id:"query-interface",level:3}],d={toc:c},u="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"transaction"},"Transaction"),(0,r.kt)("h2",{id:"content-summary"},"Content Summary"),(0,r.kt)("p",null,"everPay has its own separate transaction format, all everPay transactions follow the same format: Sign the same signature specification, and store them on the arweave blockchain for all to verify."),(0,r.kt)("h2",{id:"schema"},"Schema"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tokenSymbol"),(0,r.kt)("td",{parentName:"tr",align:null},"Token Symbol, AR,ETH,USDT,USDC etc.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"action"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"'mint'")," to deposit."),(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"'transfer'")," to transfer."),(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"'burn'")," to withdraw."),(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"'bundle'")," to batch execute internal transfers.")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"from"),(0,r.kt)("td",{parentName:"tr",align:null},"the current everPay account ID that signed the transaction.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"to"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null,(0,r.kt)("li",null,"When transferring, ",(0,r.kt)("inlineCode",{parentName:"td"},"to")," is another everPay account ID."),(0,r.kt)("li",null,"When withdrawing, ",(0,r.kt)("inlineCode",{parentName:"td"},"to")," is the blockchain wallet address to withdraw to."),(0,r.kt)("li",null,"When using bundle transaction, ",(0,r.kt)("inlineCode",{parentName:"td"},"to")," represents the everPay account ID of the external transfer recipient, which can be any everPay account ID. (including the current everPay account ID of the signed transaction)")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"Type uint; ",(0,r.kt)("inlineCode",{parentName:"td"},"decimals")," processing is required for setting, e.g. 0.1USDT, after USDT's ",(0,r.kt)("inlineCode",{parentName:"td"},"decimals: 6")," processing, it 100000.",(0,r.kt)("ul",null,(0,r.kt)("li",null,"When transferring, ",(0,r.kt)("inlineCode",{parentName:"td"},"amount")," is the transfer amount."),(0,r.kt)("li",null,"When withdrawing, ",(0,r.kt)("inlineCode",{parentName:"td"},"amount")," is the withdrawal amount."),(0,r.kt)("li",null,"When using bundle transaction, ",(0,r.kt)("inlineCode",{parentName:"td"},"amount")," is the external transfer amount.")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fee"),(0,r.kt)("td",{parentName:"tr",align:null},"Handling fee, type uint. needs to be decimals, e.g. 0.1USDT, here it's 100000 after USDT's ",(0,r.kt)("inlineCode",{parentName:"td"},"decimals: 6")," processing.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"feeRecipient"),(0,r.kt)("td",{parentName:"tr",align:null},"Receive everPay account ID for handling fees, via ",(0,r.kt)("a",{parentName:"td",href:"../server-api/basic-api/info"},"info API")," interface to get.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nonce"),(0,r.kt)("td",{parentName:"tr",align:null},"unix milliseconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tokenID"),(0,r.kt)("td",{parentName:"tr",align:null},"via ",(0,r.kt)("a",{parentName:"td",href:"../server-api/basic-api/info"},"info API")," interface, must be consistent with the token ",(0,r.kt)("inlineCode",{parentName:"td"},"id")," field ",(0,r.kt)("strong",{parentName:"td"},"corresponding to ",(0,r.kt)("inlineCode",{parentName:"strong"},"tokenSymbol")),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"chainType"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"chainType")," must be the same as ",(0,r.kt)("a",{parentName:"td",href:"../server-api/basic-api/info"},"info API"),", the token ",(0,r.kt)("inlineCode",{parentName:"td"},"chainType")," ",(0,r.kt)("strong",{parentName:"td"},"consistent"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"chainID"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"chainID")," must be the same as ",(0,r.kt)("a",{parentName:"td",href:"../server-api/basic-api/info"},"info API"),", the token ",(0,r.kt)("inlineCode",{parentName:"td"},"chainID")," ",(0,r.kt)("strong",{parentName:"td"},"consistent"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},"Additional information, developer-customizable JSON data, processed by ",(0,r.kt)("inlineCode",{parentName:"td"},"JSON.stringify()")," and passed in. Developers can pass ",(0,r.kt)("inlineCode",{parentName:"td"},"data")," to customize some complex functions, like ",(0,r.kt)("a",{parentName:"td",href:"./bundle"},"Bundle"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"version"),(0,r.kt)("td",{parentName:"tr",align:null},"transaction version ",(0,r.kt)("inlineCode",{parentName:"td"},"'v1'"),".")))),(0,r.kt)("h3",{id:"example-of-an-ethereum-account"},"Example of an ethereum account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const everpayTxWithoutSig = {\n  tokenSymbol: 'usdt',\n  action: 'transfer',\n  from: '0x26361130d5d6E798E9319114643AF8c868412859',\n  to: '5NPqYBdIsIpJzPeYixuz7BEH_W7BEk_mb8HxBD3OHXo',\n  amount: '5260000',\n  fee: '0',\n  feeRecipient: '0x6451eB7f668de69Fb4C943Db72bCF2A73DeeC6B1',\n  nonce: '1626079771946',\n  tokenID: '0xd85476c906b5301e8e9eb58d174a6f96b9dfc5ee',\n  chainType: 'ethereum',\n  chainID: '42',\n  data: '{\"hello\":\"world\",\"this\":\"is everpay\"}',\n  version: 'v1'\n}\n")),(0,r.kt)("h3",{id:"example-of-an-arweave-account"},"Example of an arweave account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const everpayTxWithoutSig = {\n  "tokenSymbol": "TUSDC",\n  "action": "transfer",\n  "from": "5NPqYBdIsIpJzPeYixuz7BEH_W7BEk_mb8HxBD3OHXo",\n  "to": "0x26361130d5d6E798E9319114643AF8c868412859",\n  "amount": "1000000",\n  "fee": "0",\n  "feeRecipient": "0xfAC49e12F19743FFc3A756294f1bf70C282E25fA",\n  "nonce": "1708507073627",\n  "tokenID": "0xf17a50ecc5fe5f476de2da5481cdd0f0ffef7712",\n  "chainType": "bsc",\n  "chainID": "97",\n  "data": "",\n  "version": "v1"\n}\n')),(0,r.kt)("h3",{id:"example-of-a-smart-account"},"Example of a smart account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const everpayTxWithoutSig = {\n  "tokenSymbol": "TUSDC",\n  "action": "transfer",\n  "from": "eidd92c8451f8c5f1e4ab05ad75bfee0acfd5bbe5e3cf2f99e1fad5d4329fb650bc696b",\n  "to": "0x26361130d5d6E798E9319114643AF8c868412859",\n  "amount": "100000",\n  "fee": "0",\n  "feeRecipient": "0xfAC49e12F19743FFc3A756294f1bf70C282E25fA",\n  "nonce": "1708507959655",\n  "tokenID": "0xf17a50ecc5fe5f476de2da5481cdd0f0ffef7712",\n  "chainType": "bsc",\n  "chainID": "97",\n  "data": "",\n  "version": "v1"\n}\n')),(0,r.kt)("h2",{id:"messagedata"},"messageData"),(0,r.kt)("p",null,"Generated by Schema in a uniform format for."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Ethereum ",(0,r.kt)("inlineCode",{parentName:"li"},"personalSign")," signature generation."),(0,r.kt)("li",{parentName:"ul"},"Generate ",(0,r.kt)("inlineCode",{parentName:"li"},"everHash"),".")),(0,r.kt)("h3",{id:"generation-rules"},"Generation rules"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export const getEverpayTxMessageData = (everpayTxWithoutSig: EverpayTxWithoutSig): string => {\n  const keys = [\n    'tokenSymbol',\n    'action',\n    'from',\n    'to',\n    'amount',\n    'fee',\n    'feeRecipient',\n    'nonce',\n    'tokenID',\n    'chainType',\n    'chainID',\n    'data',\n    'version'\n  ] as const\n  return keys.map(key => `${key}:${everpayTxWithoutSig[key]}`).join('\\n')\n}\n")),(0,r.kt)("p",null,"Where ",(0,r.kt)("inlineCode",{parentName:"p"},"EverpayTxWithoutSig")," can be found in ",(0,r.kt)("a",{parentName:"p",href:"../SDK/everpay-js/types#everpaytxwithoutsig"},"everpay-js types#EverpayTxWithoutSig")),(0,r.kt)("h3",{id:"example-of-an-ethereum-account-1"},"Example of an ethereum account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const messageData = `tokenSymbol:usdt\naction:transfer\nfrom:0x26361130d5d6E798E9319114643AF8c868412859\nto:5NPqYBdIsIpJzPeYixuz7BEH_W7BEk_mb8HxBD3OHXo\namount:5260000\nfee:0\nfeeRecipient:0x6451eB7f668de69Fb4C943Db72bCF2A73DeeC6B1\nnonce:1626079771946\ntokenID:0xd85476c906b5301e8e9eb58d174a6f96b9dfc5ee\nchainType:ethereum\nchainID:42\ndata:{"hello":"world","this":"is everpay"}\nversion:v1`\n')),(0,r.kt)("h3",{id:"example-of-an-arweave-account-1"},"Example of an arweave account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const messageData = `tokenSymbol:TUSDC\naction:transfer\nfrom:5NPqYBdIsIpJzPeYixuz7BEH_W7BEk_mb8HxBD3OHXo\nto:0x26361130d5d6E798E9319114643AF8c868412859\namount:1000000\nfee:0\nfeeRecipient:0xfAC49e12F19743FFc3A756294f1bf70C282E25fA\nnonce:1708507073627\ntokenID:0xf17a50ecc5fe5f476de2da5481cdd0f0ffef7712\nchainType:bsc\nchainID:97\ndata:\nversion:v1`\n")),(0,r.kt)("h3",{id:"example-of-a-smart-account-1"},"Example of a smart account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const messageData = `tokenSymbol:TUSDC\naction:transfer\nfrom:eidd92c8451f8c5f1e4ab05ad75bfee0acfd5bbe5e3cf2f99e1fad5d4329fb650bc696b\nto:0x26361130d5d6E798E9319114643AF8c868412859\namount:100000\nfee:0\nfeeRecipient:0xfAC49e12F19743FFc3A756294f1bf70C282E25fA\nnonce:1708507959655\ntokenID:0xf17a50ecc5fe5f476de2da5481cdd0f0ffef7712\nchainType:bsc\nchainID:97\ndata:\nversion:v1`\n")),(0,r.kt)("h2",{id:"everhash"},"everHash"),(0,r.kt)("p",null,"Each everPay transaction has a uniquely identified ",(0,r.kt)("inlineCode",{parentName:"p"},"everHash"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"personalMessageHash")," generated by ",(0,r.kt)("inlineCode",{parentName:"p"},"messageData")," using the Ethereum ",(0,r.kt)("inlineCode",{parentName:"p"},"hashPersonalMessage"),", which is ",(0,r.kt)("inlineCode",{parentName:"p"},"everHash"),"."),(0,r.kt)("h3",{id:"generation-rules-1"},"Generation rules"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// cp from: https://github.com/ethereumjs/ethereumjs-util/blob/ebf40a0fba8b00ba9acae58405bca4415e383a0d/src/signature.ts#L168\nconst hashPersonalMessage = (message: Buffer): Buffer => {\n  const prefix = Buffer.from(\n    `\\u0019Ethereum Signed Message:\\n${message.length.toString()}`,\n    'utf-8'\n  )\n  return keccak256(Buffer.concat([prefix, message]))\n}\nconst getPersonalMessageHash = (messageData: string): string => {\n  const personalMsgBuf = hashPersonalMessage(Buffer.from(messageData))\n  const personalMessageHash = `0x${personalMsgBuf.toString('hex')}`\n  return personalMessageHash\n}\n")),(0,r.kt)("h2",{id:"signature"},"signature"),(0,r.kt)("p",null,"Every everPay transaction requires a signature via the ",(0,r.kt)("strong",{parentName:"p"},"wallet")," of the sender's account or the ",(0,r.kt)("strong",{parentName:"p"},"webauthn biometrics")," of the smart account, and the everPay server verifies the validity of all signatures."),(0,r.kt)("h3",{id:"ethereum-account-model"},"Ethereum Account Model"),(0,r.kt)("p",null,"Get ",(0,r.kt)("inlineCode",{parentName:"p"},"signature")," by signing ",(0,r.kt)("inlineCode",{parentName:"p"},"messageData")," with Ethereum ",(0,r.kt)("inlineCode",{parentName:"p"},"personalSign"),"."),(0,r.kt)("h4",{id:"generate-signature-with-everpay-tx-via-ethersjs"},"Generate signature with everPay Tx via ethers.js"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const everpayTxWithoutSig = {\n  tokenSymbol: 'usdt',\n  action: 'transfer',\n  from: '0x26361130d5d6E798E9319114643AF8c868412859',\n  to: '5NPqYBdIsIpJzPeYixuz7BEH_W7BEk_mb8HxBD3OHXo',\n  amount: '5260000',\n  fee: '0',\n  feeRecipient: '0x6451eB7f668de69Fb4C943Db72bCF2A73DeeC6B1',\n  nonce: '1626079771946',\n  tokenID: '0xd85476c906b5301e8e9eb58d174a6f96b9dfc5ee',\n  chainType: 'ethereum',\n  chainID: '42',\n  data: '{\"hello\":\"world\",\"this\":\"is everpay\"}',\n  version: 'v1'\n}\n\n// const messageData = getEverpayTxMessageData(everpayTxWithoutSig)\nconst messageData = `tokenSymbol:usdt\naction:transfer\nfrom:0x26361130d5d6E798E9319114643AF8c868412859\nto:5NPqYBdIsIpJzPeYixuz7BEH_W7BEk_mb8HxBD3OHXo\namount:5260000\nfee:0\nfeeRecipient:0x6451eB7f668de69Fb4C943Db72bCF2A73DeeC6B1\nnonce:1626079771946\ntokenID:0xd85476c906b5301e8e9eb58d174a6f96b9dfc5ee\nchainType:ethereum\nchainID:42\ndata:{\"hello\":\"world\",\"this\":\"is everpay\"}\nversion:v1`\n\n// personalSign\nconst signMessageAsync = async (ethConnectedSigner: Signer, message: string): Promise<string> => {\n  return await ethConnectedSigner.signMessage(message)\n}\nconst signature = await signMessageAsync(ethConnectedSigner, messageData)\n")),(0,r.kt)("p",null,"Pseudocode reference source: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/everFinance/everpay-js/blob/main/src/lib/sign.ts"},"everpay-js src/lib/sign.ts"),"."),(0,r.kt)("h3",{id:"arweave-account-model"},"Arweave Account Model"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"personalMessageHash")," generated by ",(0,r.kt)("inlineCode",{parentName:"p"},"messageData")," using the Ethereum ",(0,r.kt)("inlineCode",{parentName:"p"},"hashPersonalMessage"),". And the ",(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array")," (or ",(0,r.kt)("inlineCode",{parentName:"p"},"Buffer"),") corresponding to ",(0,r.kt)("inlineCode",{parentName:"p"},"personalMessageHash")," is signed by arweave RSA-PSS sha256, and the signature result is then ",(0,r.kt)("inlineCode",{parentName:"p"},"base64")," converted by ",(0,r.kt)("inlineCode",{parentName:"p"},"Arweave.utils.bufferTob64Url")," (which differs from other base64 conversion functions), after conversion, and splice with ",(0,r.kt)("inlineCode",{parentName:"p"},",{{arOwner}}"),", we get ",(0,r.kt)("inlineCode",{parentName:"p"},"signature"),"."),(0,r.kt)("h4",{id:"generate-signature-with-everpay-tx-via-arweavejs"},"Generate signature with everPay Tx via arweave.js"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const everpayTxWithoutSig = {\n  "tokenSymbol": "TUSDC",\n  "action": "transfer",\n  "from": "5NPqYBdIsIpJzPeYixuz7BEH_W7BEk_mb8HxBD3OHXo",\n  "to": "0x26361130d5d6E798E9319114643AF8c868412859",\n  "amount": "1000000",\n  "fee": "0",\n  "feeRecipient": "0xfAC49e12F19743FFc3A756294f1bf70C282E25fA",\n  "nonce": "1708507073627",\n  "tokenID": "0xf17a50ecc5fe5f476de2da5481cdd0f0ffef7712",\n  "chainType": "bsc",\n  "chainID": "97",\n  "data": "",\n  "version": "v1"\n}\n\n// const messageData = getEverpayTxMessageData(everpayTxWithoutSig)\nconst messageData = `tokenSymbol:TUSDC\naction:transfer\nfrom:5NPqYBdIsIpJzPeYixuz7BEH_W7BEk_mb8HxBD3OHXo\nto:0x26361130d5d6E798E9319114643AF8c868412859\namount:1000000\nfee:0\nfeeRecipient:0xfAC49e12F19743FFc3A756294f1bf70C282E25fA\nnonce:1708507073627\ntokenID:0xf17a50ecc5fe5f476de2da5481cdd0f0ffef7712\nchainType:bsc\nchainID:97\ndata:\nversion:v1`\n\nconst signMessageAsync = async (arJWK: ArJWK, messageData: string): Promise<string> => {\n  const arweave = Arweave.init(options)\n  const msgDataBuffer = Buffer.from(messageData, \'utf-8\')\n  let arOwner = \'\'\n  let signatureB64url = \'\'\n  // web\n  if (arJWK === \'use_wallet\') {\n    try {\n      await checkArPermissions(\'ACCESS_PUBLIC_KEY\')\n    } catch {\n      throw new Error(ERRORS.ACCESS_PUBLIC_KEY_PERMISSION_NEEDED)\n    }\n    try {\n      arOwner = await (window.arweaveWallet).getActivePublicKey()\n    } catch {\n      throw new Error(ERRORS.ACCESS_PUBLIC_KEY_FAILED)\n    }\n\n    try {\n      await checkArPermissions(\'SIGNATURE\')\n    } catch {\n      throw new Error(ERRORS.SIGNATURE_PERMISSION_NEEDED)\n    }\n\n    const algorithm = {\n      name: \'RSA-PSS\',\n      saltLength: 32\n    }\n\n    if ((window.arweaveWallet as any).signMessage !== undefined) {\n      try {\n        const signature = await (window.arweaveWallet as any).signMessage(\n          msgDataBuffer,\n          { hashAlgorithm: \'SHA-256\' }\n        )\n        const buf = new Uint8Array(Object.values(signature))\n        signatureB64url = Arweave.utils.bufferTob64Url(buf)\n      } catch {\n        throw new Error(ERRORS.SIGNATURE_FAILED)\n      }\n    } else {\n      try {\n        const hash = sha256(messageData)\n        const signature = await (window.arweaveWallet).signature(\n          hexToUint8Array(hash.toString()),\n          algorithm\n        )\n        const buf = new Uint8Array(Object.values(signature))\n        signatureB64url = Arweave.utils.bufferTob64Url(buf)\n      } catch {\n        throw new Error(ERRORS.SIGNATURE_FAILED)\n      }\n    }\n\n  // node\n  } else {\n    const hash = sha256(messageData)\n    const buf = await arweave.crypto.sign(arJWK, hexToUint8Array(hash.toString()), {\n      saltLength: 32\n    })\n    arOwner = arJWK.n\n    signatureB64url = Arweave.utils.bufferTob64Url(buf)\n  }\n\n  return `${signatureB64url},${arOwner}`\n}\n\nconst signature = await signMessageAsync(config.arJWK as ArJWK, messageData)\n')),(0,r.kt)("p",null,"Pseudocode reference source: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/everFinance/everpay-js/blob/main/src/lib/sign.ts"},"everpay-js src/lib/sign.ts")),(0,r.kt)("h3",{id:"smart-account-model"},"Smart Account Model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const everpayTxWithoutSig = {\n  "tokenSymbol": "TUSDC",\n  "action": "transfer",\n  "from": "eidd92c8451f8c5f1e4ab05ad75bfee0acfd5bbe5e3cf2f99e1fad5d4329fb650bc696b",\n  "to": "0x26361130d5d6E798E9319114643AF8c868412859",\n  "amount": "100000",\n  "fee": "0",\n  "feeRecipient": "0xfAC49e12F19743FFc3A756294f1bf70C282E25fA",\n  "nonce": "1708507959655",\n  "tokenID": "0xf17a50ecc5fe5f476de2da5481cdd0f0ffef7712",\n  "chainType": "bsc",\n  "chainID": "97",\n  "data": "",\n  "version": "v1"\n}\n\n// const messageData = getEverpayTxMessageData(everpayTxWithoutSig)\nconst messageData = `tokenSymbol:TUSDC\naction:transfer\nfrom:eidd92c8451f8c5f1e4ab05ad75bfee0acfd5bbe5e3cf2f99e1fad5d4329fb650bc696b\nto:0x26361130d5d6E798E9319114643AF8c868412859\namount:100000\nfee:0\nfeeRecipient:0xfAC49e12F19743FFc3A756294f1bf70C282E25fA\nnonce:1708507959655\ntokenID:0xf17a50ecc5fe5f476de2da5481cdd0f0ffef7712\nchainType:bsc\nchainID:97\ndata:\nversion:v1`\n\nconst hashPersonalMessage = (message: Buffer): Buffer => {\n  const prefix = Buffer.from(\n    `\\u0019Ethereum Signed Message:\\n${message.length.toString()}`,\n    \'utf-8\'\n  )\n  return keccak256(Buffer.concat([prefix, message]))\n}\nconst getPersonalMessageHash = (messageData: string): string => {\n  const personalMsgBuf = hashPersonalMessage(Buffer.from(messageData))\n  const personalMessageHash = `0x${personalMsgBuf.toString(\'hex\')}`\n  return personalMessageHash\n}\n\nconst signMessageAsync = async (debug: boolean, isSmartAccount: boolean, email: string, everHash: string, accountData?: any): Promise<string> => {\n  if (accountData == null) {\n    const everpayHost = getEverpayHost(debug)\n    const everId = genEverId(email)\n    accountData = await getAccountData(everpayHost, everId)\n  }\n  const arr = Object.entries(accountData.publicValues) as any\n  const publicKeyData = {\n    allowCredentials: arr.map((publicIdValueArr: any) => {\n      const id = publicIdValueArr[0]\n      return {\n        type: \'public-key\',\n        id: Arweave.utils.b64UrlToBuffer(id),\n        transports: [\n          \'internal\',\n          \'usb\',\n          \'nfc\',\n          \'ble\'\n        ].concat(!isMobile ? [\'hybrid\'] : [])\n      }\n    })\n  }\n  const assertion = await navigator.credentials.get({\n    publicKey: {\n      ...publicKeyData,\n      timeout: 300000,\n      userVerification: \'required\',\n      challenge: Arweave.utils.b64UrlToBuffer(window.btoa(everHash)),\n      rpId: getRpId()\n    } as any\n  }) as any\n\n  if (assertion === null) {\n    throw new Error(\'cancelled\')\n  }\n  const authenticatorData = assertion.response.authenticatorData\n  const clientDataJSON = assertion.response.clientDataJSON\n  const rawId = assertion.rawId\n  const signature = assertion.response.signature\n  const userHandle = assertion.response.userHandle\n  const sigJson = {\n    id: assertion?.id,\n    rawId: Arweave.utils.bufferTob64Url(rawId),\n    clientDataJSON: Arweave.utils.bufferTob64Url(clientDataJSON),\n    authenticatorData: Arweave.utils.bufferTob64Url(authenticatorData),\n    signature: Arweave.utils.bufferTob64Url(signature),\n    userHandle: Arweave.utils.bufferTob64Url(userHandle)\n  }\n  const sig = window.btoa(JSON.stringify(sigJson))\n  return `${sig},${accountData.publicValues[assertion?.id]},FIDO2`\n}\n\nconst signature = await signMessageAsync(true, true, \'fgva5gasf134@163.com\', getPersonalMessageHash(messageData))\n')),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"For ethereum ",(0,r.kt)("inlineCode",{parentName:"li"},"personalSign")," signature is ",(0,r.kt)("inlineCode",{parentName:"li"},"messageData")," string, and the result is the ",(0,r.kt)("inlineCode",{parentName:"li"},"signature"),";"),(0,r.kt)("li",{parentName:"ul"},"For arweave RSA-PSS sha256 signature is ",(0,r.kt)("inlineCode",{parentName:"li"},"messageDataHash")," Buffer, the result needs to be further converted by ",(0,r.kt)("inlineCode",{parentName:"li"},"Arweave.utils.bufferTob64Url")," to get ",(0,r.kt)("inlineCode",{parentName:"li"},"base64 string")," and spliced with ",(0,r.kt)("inlineCode",{parentName:"li"},",{{arOwner}}"),", which is ",(0,r.kt)("inlineCode",{parentName:"li"},"signature"),"."),(0,r.kt)("li",{parentName:"ul"},"Signature for smart account webauthn",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"use ",(0,r.kt)("inlineCode",{parentName:"li"},"getPersonalMessageHash")," to get ",(0,r.kt)("inlineCode",{parentName:"li"},"everHash")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"messageData"),"."),(0,r.kt)("li",{parentName:"ol"},"get the public key information of the eid corresponding to the email account through the backend interface."),(0,r.kt)("li",{parentName:"ol"},"use the corresponding public key information to call webauthn to sign the ",(0,r.kt)("inlineCode",{parentName:"li"},"everHash"),"."),(0,r.kt)("li",{parentName:"ol"},"Assemble the final signature result"))))),(0,r.kt)("h2",{id:"signature-checksum"},"Signature Checksum"),(0,r.kt)("p",null,"Every everPay transaction needs to be signed by the ",(0,r.kt)("strong",{parentName:"p"},"wallet")," of the sender's account or the ",(0,r.kt)("strong",{parentName:"p"},"webauthn biometrics")," of the smart account, and then the signed everPay transaction is submitted to the everPay server, which verifies all the signatures to ensure the validity of the transaction."),(0,r.kt)("h3",{id:"ethereum-account-model-1"},"Ethereum Account Model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const signature = await signMessageAsync(ethConnectedSigner, messageData)\nconst verified = ethers.utils.verifyMessage(messageData, signature).toLowerCase() === everpayTxWithoutSig.from.toLowerCase()\n")),(0,r.kt)("h3",{id:"arweave-account-model-1"},"Arweave Account Model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const signature = await signMessageAsync(config.arJWK as ArJWK, message)\nconst hash = sha256(messageData)\n\n// arOwner is the publicKey of the arweave wallet\nconst [sigB64url, arOwner] = signature.split(',')\nconst verified = arweave.crypto.verify(\n  arOwner,\n  hexToUint8Array(hash.toString()),\n  Arweave.utils.b64UrlToBuffer(sigB64url)\n)\n\n")),(0,r.kt)("h3",{id:"smart-account-model-1"},"Smart Account Model"),(0,r.kt)("p",null,"Reference: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/everFinance/everpay-js/blob/main/test/%2BverifyMessage.test.ts#L45"},"verifyMessage.test.ts#L45")),(0,r.kt)("h2",{id:"submit-a-transaction"},"Submit a transaction"),(0,r.kt)("p",null,"Submit everPay transaction to everPay backend server via POST request to ",(0,r.kt)("a",{parentName:"p",href:"../server-api/operation-api/tx"},(0,r.kt)("inlineCode",{parentName:"a"},"tx"))," interface."),(0,r.kt)("h3",{id:"field-descriptions"},"Field Descriptions"),(0,r.kt)("p",null,"In addition to the ",(0,r.kt)("a",{parentName:"p",href:"#schema"},(0,r.kt)("inlineCode",{parentName:"a"},"Schema"))," definition field, supplemental signatures get ",(0,r.kt)("inlineCode",{parentName:"p"},"signature")," as the ",(0,r.kt)("inlineCode",{parentName:"p"},"sig")," field."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"supplementary fields"),(0,r.kt)("th",{parentName:"tr",align:null},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sig"),(0,r.kt)("td",{parentName:"tr",align:null},"Generated ",(0,r.kt)("inlineCode",{parentName:"td"},"signature"),", based on different account model signatures.")))),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  tokenSymbol: 'ar',\n  action: 'transfer',\n  from: '5NPqYBdIsIpJzPeYixuz7BEH_W7BEk_mb8HxBD3OHXo',\n  to: '0x26361130d5d6E798E9319114643AF8c868412859',\n  amount: '100',\n  fee: '0',\n  feeRecipient: '0x6451eB7f668de69Fb4C943Db72bCF2A73DeeC6B1',\n  nonce: '1629276767583',\n  tokenID: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,0xcc9141efa8c20c7df0778748255b1487957811be',\n  chainType: 'arweave,ethereum',\n  chainID: '0,42',\n  data: '{\"hello\":\"world\",\"this\":\"is everpay\"}',\n  version: 'v1',\n  sig: 'Lg8Xgk_LZn_H-HVOz042wbhv5RVQjc7Z0iVV4_UbWWgoqHnboB6PQujtCtu1_QW0cXPqakm9sLi7fJlhK7Hm7UMFQiwXbVB_bClr73GKAcV0tpWye9BUsKw9SfOnFAHCCufF4C1PPt4xRrJp5UeG-smonQ9k4t0GmoXnXoSfmFxsEvaId5SeNaOZa1JYMzReo8-P4m5EdrTKLNgWwo28OOi4GbpXIzRxorJp-dwhsNhQHu4vzOq4rflGRwQKb9bj4S92YqEp2wXRRU7ebEiBJlGjQrf0HgTr7gZO_q3gI5FQgsL_UbOo4sp5hL69IUOfRxmr_RTiLZZzQRu-0dJBsWOSWYC5232fRf3MwogIELdDUl3dVCz5PDnXp8AOPKBQCiblu74oTSyKhsVMvwfER125dXyKtxJLlxTkDhEOPzTJdufy-Czs1pE_ZPKj4z44P3W7UdGiAt9rXYQb6JjMNOpG1_S7RMa5OKoCV4MbuK2CGFCNBE0h4zxeXZfXLOMSImrfFZ4nZAHkTbpKgpH1hPDEMGsEEgwvDl6_AyjrMOebAAyJGj6keyy9tf7lQBKKaj2-bGG6PIVC-l7wCXJizFt-3Cb0aC6ZXaCHGdhHuI-7Ime4M5iZESiBhkIhtOV3ADjqks174o0J0zKxE0NVl14tuu5tY-UfJ6kAkqbujLs,odtNk97a4PARR0I8g3kQpzlFVmPg-udyjfl81fbTioyP2pEw5tP5A1-FVqR-QFFPskW-j7yAze5usYNWHEir7oVQ9d9bbkcZIDEPqwSTO1JoD1BKXeeBK0xsmiSgxeY7uuRXWdhXREhlmIMsV8ObakEeXdbbxbs89XaZHBuES7boASrRVDXRz_mhMu6u_58OdLeMwR3I1BCH6nphNGVOehA7GOOqEBvtesBset0bNaLCb0JpSg5ZW_0AGLP-XydzE3IPLLx4NQEEJY21y8fChxYM4jntI78l5hojp9NlmS69EXlj0PoMjsbaWaz9WtnZaMAbnaOGAHhv8Y_TNmBI0FHpqHaGPP906Mnrgdm3tl2L40EX-Q6-liNVkB56CmPxXzSesu-4x5LLYxQ-aX3W6Hj7RCDTacxqUJHzOrhJqXSx6Jx0t8CwyfReMgVv4p5t1C3OZ8yYbJ_H3LdkeriVniaC5jQdMyIJ6QBMzr1XdXIw9WuEG2kCIYtvOp2qDuu9o2SY-9W4Yv7VWRDfWO38xxR4ZO65MMAdZxeaZ4w8sK_owH46Wm0XoT3Al-LPypaeijWqlHEu4R8c2ersD3xkDvXC_lNtaQw_qyfI3UEH5fWupY4zhZeDGkvXQh32Fv4CxlZL58iUHv9SvR7p5LgBCC3AVUbn7Sqc4xPUCZMj-Tc'\n}\n")),(0,r.kt)("h3",{id:"nonce"},"nonce"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nonce")," is generated by the user on the clients' side and can be received by everPay's server 100s up or down from the server time."),(0,r.kt)("li",{parentName:"ul"},"every time a user submits an everPay transaction,the ",(0,r.kt)("inlineCode",{parentName:"li"},"nonce")," must be larger than the user's last ",(0,r.kt)("inlineCode",{parentName:"li"},"nonce")," value.")),(0,r.kt)("h2",{id:"transaction-record"},"Transaction Record"),(0,r.kt)("p",null,"The everPay transaction is submitted to everPay's server and is passed by a signature verification that can get the transaction record through everPay's interface."),(0,r.kt)("p",null,"everPay adds some fields to the ",(0,r.kt)("a",{parentName:"p",href:"#schema"},(0,r.kt)("inlineCode",{parentName:"a"},"Schema"))," definition field and ",(0,r.kt)("inlineCode",{parentName:"p"},"sig")," signature field for everPay's service."),(0,r.kt)("h3",{id:"field-descriptions-1"},"Field Descriptions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"supplementary fields"),(0,r.kt)("th",{parentName:"tr",align:null},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"everHash"),(0,r.kt)("td",{parentName:"tr",align:null},"each everPay transaction corresponds to a unique ",(0,r.kt)("inlineCode",{parentName:"td"},"everHash"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"everHash")," is generated with reference to ",(0,r.kt)("a",{parentName:"td",href:"#everhash"},"everHash"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null,(0,r.kt)("li",null,"When the everPay transaction is recorded on the Arweave blockchain, this ",(0,r.kt)("inlineCode",{parentName:"td"},"timestamp")," represents the unix milliseconds of the everPay transaction being recorded on the Arweave blockchain."),(0,r.kt)("li",null,"If the everPay transaction is not recorded on the Arweave blockchain, ",(0,r.kt)("inlineCode",{parentName:"td"},"timestamp")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"0"),".")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"status"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"confirmed")," means the everPay transaction has been confirmed by everPay's backend signature verification, but not yet recorded on the Arweave blockchain."),(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"packaged")," means the everPay transaction has been recorded on the Arweave blockchain.")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"internalStatus"),(0,r.kt)("td",{parentName:"tr",align:null},"The field returns a specific error message only if internal transfers fails in the bundle transaction. The value is ",(0,r.kt)("inlineCode",{parentName:"td"},"success")," for successful internal transfers, withdrawals and recharges.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null,(0,r.kt)("li",null,"When the everPay transaction is recorded on the Arweave blockchain, the ",(0,r.kt)("inlineCode",{parentName:"td"},"id")," corresponds to the hash of the transaction recorded on Arweave."),(0,r.kt)("li",null,"If the everPay transaction is not recorded on the Arweave blockchain, the ",(0,r.kt)("inlineCode",{parentName:"td"},"id")," is an empty string.")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"targetChainTxHash"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null,(0,r.kt)("li",null,"The corresponding blockchain ",(0,r.kt)("inlineCode",{parentName:"td"},"txHash")," for deposits and withdrawals. "),(0,r.kt)("li",null,"If the withdrawal is not completed or is an everPay transfer transaction, this ",(0,r.kt)("inlineCode",{parentName:"td"},"targetChainTxHash")," will be an empty string.")))))),(0,r.kt)("h3",{id:"query-interface"},"Query Interface"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../server-api/basic-api/txs"},"txs")," Checks all everPay transaction records."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../server-api/basic-api/txsByAccount"},"txsByAccount")," Checks the everPay transaction records of a specific everPay account."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../server-api/basic-api/txByHash"},"txByHash")," Checks the everPay transaction record based on ",(0,r.kt)("inlineCode",{parentName:"li"},"everHash"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../server-api/basic-api/mintedTxByChainTxHash"},"mintedTxByChainTxHash")," Checks the everPay transaction record of the deposit according to the blockchain record ID. (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"txHash")," for ethereum)")))}p.isMDXComponent=!0}}]);